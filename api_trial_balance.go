/*
 * freee API
 *
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <pre><code>【重要】会計freee APIの新バージョンについて 2020年12月まで、2つのバージョンが利用できる状態です。古いものは2020年12月に利用不可となります。<br> 新しいAPIを利用するにはリクエストヘッダーに以下を指定します。 X-Api-Version: 2020-06-15<br> 指定がない場合は2020年12月に廃止予定のAPIを利用することとなります。<br> 【重要】APIのバージョン指定をせずに利用し続ける場合 2020年12月に新しいバージョンのAPIに自動的に切り替わります。 詳細は、<a href=\"https://developer.freee.co.jp/release-note/2948\" target=\"_blank\">リリースノート</a>をご覧ください。<br> 旧バージョンのAPIリファレンスを確認したい場合は、<a href=\"https://freee.github.io/freee-api-schema/\" target=\"_blank\">旧バージョンのAPIリファレンスページ</a>をご覧ください。 </code></pre>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsエンドポイント</h4>  <p>freeeは/reportsエンドポイントに対して1秒間に10以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * API version: v1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package freee

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// TrialBalanceApiService TrialBalanceApi service
type TrialBalanceApiService service

// GetTrialBsOpts Optional parameters for the method 'GetTrialBs'
type GetTrialBsOpts struct {
    FiscalYear optional.Int32
    StartMonth optional.Int32
    EndMonth optional.Int32
    StartDate optional.String
    EndDate optional.String
    AccountItemDisplayType optional.String
    BreakdownDisplayType optional.String
    PartnerId optional.Int32
    PartnerCode optional.String
    ItemId optional.Int32
    Adjustment optional.String
}

/*
GetTrialBs 貸借対照表の取得
 &lt;h2 id&#x3D;\&quot;\&quot;&gt;概要&lt;/h2&gt;  &lt;p&gt;指定した事業所の貸借対照表を取得する&lt;/p&gt;  &lt;h2 id&#x3D;\&quot;_2\&quot;&gt;定義&lt;/h2&gt;  &lt;ul&gt;  &lt;li&gt; &lt;p&gt;created_at : 作成日時&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;account_item_name : 勘定科目名&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;hierarchy_level: 階層レベル&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;parent_account_category_name: 上位勘定科目カテゴリー名&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;opening_balance : 期首残高 &lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;debit_amount : 借方金額 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;credit_amount:  貸方金額 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;closing_balance : 期末残高 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;composition_ratio : 構成比&lt;/p&gt; &lt;/li&gt; &lt;h2 id&#x3D;\&quot;_3\&quot;&gt;注意点&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;会計年度が指定されない場合、現在の会計年度がデフォルトとなります。&lt;/li&gt; &lt;li&gt;絞り込み条件の日付と、月または年度は同時に指定することはできません。&lt;/li&gt; &lt;li&gt;up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。&lt;/li&gt;  &lt;/ul&gt; &lt;h2 id&#x3D;\&quot;_4\&quot;&gt;レスポンスの例&lt;/h2&gt;  &lt;blockquote&gt; &lt;p&gt;GET https://api.freee.co.jp/api/1/reports/trial_bs?company_id&#x3D;1&amp;amp;fiscal_year&#x3D;2017&amp;amp;breakdown_display_type&#x3D;partner&lt;/p&gt; &lt;/blockquote&gt;  &lt;pre&gt;&lt;code&gt;{   &amp;quot;trial_bs&amp;quot; :     {       &amp;quot;company_id&amp;quot; : 1,       &amp;quot;fiscal_year&amp;quot; : 2017,       &amp;quot;breakdown_display_type&amp;quot; : &amp;quot;partner&amp;quot;,       &amp;quot;created_at&amp;quot; : &amp;quot;2018-05-01 12:00:50&amp;quot       &amp;quot;balances&amp;quot; : [{         &amp;quot;account_item_id&amp;quot; : 1000,         &amp;quot;account_item_name&amp;quot; : &amp;quot;現金&amp;quot;,         &amp;quot;hierarchy_level&amp;quot; : 2,         &amp;quot;account_category_name&amp;quot; : &amp;quot;流動資産&amp;quot;,         &amp;quot;opening_balance&amp;quot; : 100000,         &amp;quot;debit_amount&amp;quot; : 50000,         &amp;quot;credit_amount&amp;quot; : 20000,         &amp;quot;closing_balance&amp;quot; : 130000,         &amp;quot;composition_ratio&amp;quot; : 0.25         &amp;quot;partners&amp;quot; : [{           &amp;quot;id&amp;quot; : 123,           &amp;quot;name&amp;quot; : &amp;quot;freee&amp;quot;,           &amp;quot;opening_balance&amp;quot; : 100000,           &amp;quot;debit_amount&amp;quot; : 50000,           &amp;quot;credit_amount&amp;quot; : 20000,           &amp;quot;closing_balance&amp;quot; : 130000,           &amp;quot;composition_ratio&amp;quot; : 0.25           },         ...         ]       },       ...       ]     } }&lt;/code&gt;&lt;/pre&gt; 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param companyId 事業所ID
 * @param optional nil or *GetTrialBsOpts - Optional Parameters:
 * @param "FiscalYear" (optional.Int32) -  会計年度
 * @param "StartMonth" (optional.Int32) -  発生月で絞込：開始会計月(1-12)
 * @param "EndMonth" (optional.Int32) -  発生月で絞込：終了会計月(1-12)
 * @param "StartDate" (optional.String) -  発生日で絞込：開始日(yyyy-mm-dd)
 * @param "EndDate" (optional.String) -  発生日で絞込：終了日(yyyy-mm-dd)
 * @param "AccountItemDisplayType" (optional.String) -  勘定科目の表示（勘定科目: account_item, 決算書表示:group）
 * @param "BreakdownDisplayType" (optional.String) -  内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます
 * @param "PartnerId" (optional.Int32) -  取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
 * @param "PartnerCode" (optional.String) -  取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
 * @param "ItemId" (optional.Int32) -  品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
 * @param "Adjustment" (optional.String) -  決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）
@return TrialBsResponse
*/
func (a *TrialBalanceApiService) GetTrialBs(ctx _context.Context, companyId int32, localVarOptionals *GetTrialBsOpts) (TrialBsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialBsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1/reports/trial_bs"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(companyId, ""))
	if localVarOptionals != nil && localVarOptionals.FiscalYear.IsSet() {
		localVarQueryParams.Add("fiscal_year", parameterToString(localVarOptionals.FiscalYear.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartMonth.IsSet() {
		localVarQueryParams.Add("start_month", parameterToString(localVarOptionals.StartMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndMonth.IsSet() {
		localVarQueryParams.Add("end_month", parameterToString(localVarOptionals.EndMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountItemDisplayType.IsSet() {
		localVarQueryParams.Add("account_item_display_type", parameterToString(localVarOptionals.AccountItemDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BreakdownDisplayType.IsSet() {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(localVarOptionals.BreakdownDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerId.IsSet() {
		localVarQueryParams.Add("partner_id", parameterToString(localVarOptionals.PartnerId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerCode.IsSet() {
		localVarQueryParams.Add("partner_code", parameterToString(localVarOptionals.PartnerCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemId.IsSet() {
		localVarQueryParams.Add("item_id", parameterToString(localVarOptionals.ItemId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Adjustment.IsSet() {
		localVarQueryParams.Add("adjustment", parameterToString(localVarOptionals.Adjustment.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetTrialBsThreeYearsOpts Optional parameters for the method 'GetTrialBsThreeYears'
type GetTrialBsThreeYearsOpts struct {
    FiscalYear optional.Int32
    StartMonth optional.Int32
    EndMonth optional.Int32
    StartDate optional.String
    EndDate optional.String
    AccountItemDisplayType optional.String
    BreakdownDisplayType optional.String
    PartnerId optional.Int32
    PartnerCode optional.String
    ItemId optional.Int32
    Adjustment optional.String
}

/*
GetTrialBsThreeYears 貸借対照表(３期間比較)の取得
 &lt;h2 id&#x3D;\&quot;\&quot;&gt;概要&lt;/h2&gt;  &lt;p&gt;指定した事業所の貸借対照表(３期間比較)を取得する&lt;/p&gt;  &lt;h2 id&#x3D;\&quot;_2\&quot;&gt;定義&lt;/h2&gt;  &lt;ul&gt;  &lt;li&gt; &lt;p&gt;created_at : 作成日時&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;account_item_name : 勘定科目名&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;hierarchy_level: 階層レベル&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;parent_account_category_name: 上位勘定科目カテゴリー名&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;two_years_before_closing_balance:  前々年度期末残高 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;last_year_closing_balance:  前年度期末残高 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;closing_balance : 期末残高 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;year_on_year : 前年比&lt;/p&gt; &lt;/li&gt; &lt;h2 id&#x3D;\&quot;_3\&quot;&gt;注意点&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;会計年度が指定されない場合、現在の会計年度がデフォルトとなります。&lt;/li&gt; &lt;li&gt;絞り込み条件の日付と、月または年度は同時に指定することはできません。&lt;/li&gt; &lt;li&gt;up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。&lt;/li&gt;  &lt;/ul&gt; &lt;h2 id&#x3D;\&quot;_4\&quot;&gt;レスポンスの例&lt;/h2&gt;  &lt;blockquote&gt; &lt;p&gt;GET https://api.freee.co.jp/api/1/reports/trial_bs_three_years?company_id&#x3D;1&amp;amp;fiscal_year&#x3D;2017&lt;/p&gt; &lt;/blockquote&gt;  &lt;pre&gt;&lt;code&gt;{   &amp;quot;trial_bs_three_years&amp;quot; :     {       &amp;quot;company_id&amp;quot; : 1,       &amp;quot;fiscal_year&amp;quot; : 2017,       &amp;quot;created_at&amp;quot; : &amp;quot;2018-05-01 12:00:50&amp;quot       &amp;quot;balances&amp;quot; : [{         &amp;quot;account_item_id&amp;quot; : 1000,         &amp;quot;account_item_name&amp;quot; : &amp;quot;現金&amp;quot;,         &amp;quot;hierarchy_level&amp;quot; : 2,         &amp;quot;account_category_name&amp;quot; : &amp;quot;流動資産&amp;quot;,         &amp;quot;two_year_before_closing_balance&amp;quot; : 50000,         &amp;quot;last_year_closing_balance&amp;quot; : 25000,         &amp;quot;closing_balance&amp;quot; : 100000,         &amp;quot;year_on_year&amp;quot; : 0.85       },       ...       ]     } }&lt;/code&gt;&lt;/pre&gt; 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param companyId 事業所ID
 * @param optional nil or *GetTrialBsThreeYearsOpts - Optional Parameters:
 * @param "FiscalYear" (optional.Int32) -  会計年度
 * @param "StartMonth" (optional.Int32) -  発生月で絞込：開始会計月(1-12)
 * @param "EndMonth" (optional.Int32) -  発生月で絞込：終了会計月(1-12)
 * @param "StartDate" (optional.String) -  発生日で絞込：開始日(yyyy-mm-dd)
 * @param "EndDate" (optional.String) -  発生日で絞込：終了日(yyyy-mm-dd)
 * @param "AccountItemDisplayType" (optional.String) -  勘定科目の表示（勘定科目: account_item, 決算書表示:group）
 * @param "BreakdownDisplayType" (optional.String) -  内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます
 * @param "PartnerId" (optional.Int32) -  取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
 * @param "PartnerCode" (optional.String) -  取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
 * @param "ItemId" (optional.Int32) -  品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
 * @param "Adjustment" (optional.String) -  決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）
@return TrialBsThreeYearsResponse
*/
func (a *TrialBalanceApiService) GetTrialBsThreeYears(ctx _context.Context, companyId int32, localVarOptionals *GetTrialBsThreeYearsOpts) (TrialBsThreeYearsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialBsThreeYearsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1/reports/trial_bs_three_years"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(companyId, ""))
	if localVarOptionals != nil && localVarOptionals.FiscalYear.IsSet() {
		localVarQueryParams.Add("fiscal_year", parameterToString(localVarOptionals.FiscalYear.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartMonth.IsSet() {
		localVarQueryParams.Add("start_month", parameterToString(localVarOptionals.StartMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndMonth.IsSet() {
		localVarQueryParams.Add("end_month", parameterToString(localVarOptionals.EndMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountItemDisplayType.IsSet() {
		localVarQueryParams.Add("account_item_display_type", parameterToString(localVarOptionals.AccountItemDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BreakdownDisplayType.IsSet() {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(localVarOptionals.BreakdownDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerId.IsSet() {
		localVarQueryParams.Add("partner_id", parameterToString(localVarOptionals.PartnerId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerCode.IsSet() {
		localVarQueryParams.Add("partner_code", parameterToString(localVarOptionals.PartnerCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemId.IsSet() {
		localVarQueryParams.Add("item_id", parameterToString(localVarOptionals.ItemId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Adjustment.IsSet() {
		localVarQueryParams.Add("adjustment", parameterToString(localVarOptionals.Adjustment.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetTrialBsTwoYearsOpts Optional parameters for the method 'GetTrialBsTwoYears'
type GetTrialBsTwoYearsOpts struct {
    FiscalYear optional.Int32
    StartMonth optional.Int32
    EndMonth optional.Int32
    StartDate optional.String
    EndDate optional.String
    AccountItemDisplayType optional.String
    BreakdownDisplayType optional.String
    PartnerId optional.Int32
    PartnerCode optional.String
    ItemId optional.Int32
    Adjustment optional.String
}

/*
GetTrialBsTwoYears 貸借対照表(前年比較)の取得
 &lt;h2 id&#x3D;\&quot;\&quot;&gt;概要&lt;/h2&gt;  &lt;p&gt;指定した事業所の貸借対照表(前年比較)を取得する&lt;/p&gt;  &lt;h2 id&#x3D;\&quot;_2\&quot;&gt;定義&lt;/h2&gt;  &lt;ul&gt;  &lt;li&gt; &lt;p&gt;created_at : 作成日時&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;account_item_name : 勘定科目名&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;hierarchy_level: 階層レベル&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;parent_account_category_name: 上位勘定科目カテゴリー名&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;last_year_closing_balance:  前年度期末残高 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;closing_balance : 期末残高 &lt;/p&gt; &lt;/li&gt; &lt;h2 id&#x3D;\&quot;_3\&quot;&gt;注意点&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;会計年度が指定されない場合、現在の会計年度がデフォルトとなります。&lt;/li&gt; &lt;li&gt;絞り込み条件の日付と、月または年度は同時に指定することはできません。&lt;/li&gt; &lt;li&gt;up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。&lt;/li&gt;  &lt;/ul&gt;  &lt;h2 id&#x3D;\&quot;_4\&quot;&gt;レスポンスの例&lt;/h2&gt;  &lt;blockquote&gt; &lt;p&gt;GET https://api.freee.co.jp/api/1/reports/trial_bs_two_years?company_id&#x3D;1&amp;amp;fiscal_year&#x3D;2017&lt;/p&gt; &lt;/blockquote&gt;  &lt;pre&gt;&lt;code&gt;{   &amp;quot;trial_bs_two_years&amp;quot; :     {       &amp;quot;company_id&amp;quot; : 1,       &amp;quot;fiscal_year&amp;quot; : 2017,       &amp;quot;created_at&amp;quot; : &amp;quot;2018-05-01 12:00:50&amp;quot       &amp;quot;balances&amp;quot; : [{         &amp;quot;account_item_id&amp;quot; : 1000,         &amp;quot;account_item_name&amp;quot; : &amp;quot;現金&amp;quot;,         &amp;quot;hierarchy_level&amp;quot; : 2,         &amp;quot;account_category_name&amp;quot; : &amp;quot;流動資産&amp;quot;,         &amp;quot;last_year_closing_balance&amp;quot; : 25000,         &amp;quot;closing_balance&amp;quot; : 100000,         &amp;quot;year_on_year&amp;quot; : 0.85        },       ...       ]     } }&lt;/code&gt;&lt;/pre&gt; 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param companyId 事業所ID
 * @param optional nil or *GetTrialBsTwoYearsOpts - Optional Parameters:
 * @param "FiscalYear" (optional.Int32) -  会計年度
 * @param "StartMonth" (optional.Int32) -  発生月で絞込：開始会計月(1-12)
 * @param "EndMonth" (optional.Int32) -  発生月で絞込：終了会計月(1-12)
 * @param "StartDate" (optional.String) -  発生日で絞込：開始日(yyyy-mm-dd)
 * @param "EndDate" (optional.String) -  発生日で絞込：終了日(yyyy-mm-dd)
 * @param "AccountItemDisplayType" (optional.String) -  勘定科目の表示（勘定科目: account_item, 決算書表示:group）
 * @param "BreakdownDisplayType" (optional.String) -  内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます
 * @param "PartnerId" (optional.Int32) -  取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
 * @param "PartnerCode" (optional.String) -  取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
 * @param "ItemId" (optional.Int32) -  品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
 * @param "Adjustment" (optional.String) -  決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）
@return TrialBsTwoYearsResponse
*/
func (a *TrialBalanceApiService) GetTrialBsTwoYears(ctx _context.Context, companyId int32, localVarOptionals *GetTrialBsTwoYearsOpts) (TrialBsTwoYearsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialBsTwoYearsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1/reports/trial_bs_two_years"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(companyId, ""))
	if localVarOptionals != nil && localVarOptionals.FiscalYear.IsSet() {
		localVarQueryParams.Add("fiscal_year", parameterToString(localVarOptionals.FiscalYear.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartMonth.IsSet() {
		localVarQueryParams.Add("start_month", parameterToString(localVarOptionals.StartMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndMonth.IsSet() {
		localVarQueryParams.Add("end_month", parameterToString(localVarOptionals.EndMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountItemDisplayType.IsSet() {
		localVarQueryParams.Add("account_item_display_type", parameterToString(localVarOptionals.AccountItemDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BreakdownDisplayType.IsSet() {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(localVarOptionals.BreakdownDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerId.IsSet() {
		localVarQueryParams.Add("partner_id", parameterToString(localVarOptionals.PartnerId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerCode.IsSet() {
		localVarQueryParams.Add("partner_code", parameterToString(localVarOptionals.PartnerCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemId.IsSet() {
		localVarQueryParams.Add("item_id", parameterToString(localVarOptionals.ItemId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Adjustment.IsSet() {
		localVarQueryParams.Add("adjustment", parameterToString(localVarOptionals.Adjustment.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetTrialPlOpts Optional parameters for the method 'GetTrialPl'
type GetTrialPlOpts struct {
    FiscalYear optional.Int32
    StartMonth optional.Int32
    EndMonth optional.Int32
    StartDate optional.String
    EndDate optional.String
    AccountItemDisplayType optional.String
    BreakdownDisplayType optional.String
    PartnerId optional.Int32
    PartnerCode optional.String
    ItemId optional.Int32
    SectionId optional.Int32
    Adjustment optional.String
    CostAllocation optional.String
}

/*
GetTrialPl 損益計算書の取得
 &lt;h2 id&#x3D;\&quot;\&quot;&gt;概要&lt;/h2&gt;  &lt;p&gt;指定した事業所の損益計算書を取得する&lt;/p&gt;  &lt;h2 id&#x3D;\&quot;_2\&quot;&gt;定義&lt;/h2&gt;  &lt;ul&gt;  &lt;li&gt; &lt;p&gt;created_at : 作成日時&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;account_item_name : 勘定科目名&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;hierarchy_level: 階層レベル&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;parent_account_category_name: 上位勘定科目カテゴリー名&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;opening_balance : 期首残高 &lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;debit_amount : 借方金額 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;credit_amount:  貸方金額 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;closing_balance : 期末残高 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;composition_ratio : 構成比&lt;/p&gt; &lt;/li&gt; &lt;h2 id&#x3D;\&quot;_3\&quot;&gt;注意点&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;会計年度が指定されない場合、現在の会計年度がデフォルトとなります。&lt;/li&gt; &lt;li&gt;絞り込み条件の日付と、月または年度は同時に指定することはできません。&lt;/li&gt; &lt;li&gt;up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。&lt;/li&gt; &lt;li&gt;配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。&lt;/li&gt; &lt;/ul&gt; &lt;h2 id&#x3D;\&quot;_4\&quot;&gt;レスポンスの例&lt;/h2&gt;  &lt;blockquote&gt; &lt;p&gt;GET https://api.freee.co.jp/api/1/reports/trial_pl?company_id&#x3D;1&amp;amp;fiscal_year&#x3D;2017&amp;amp;breakdown_display_type&#x3D;partner&lt;/p&gt; &lt;/blockquote&gt;  &lt;pre&gt;&lt;code&gt;{   &amp;quot;trial_pl&amp;quot; :     {       &amp;quot;company_id&amp;quot; : 1,       &amp;quot;fiscal_year&amp;quot; : 2017,       &amp;quot;breakdown_display_type&amp;quot; : &amp;quot;partner&amp;quot;,       &amp;quot;created_at&amp;quot; : &amp;quot;2018-05-01 12:00:50&amp;quot       &amp;quot;balances&amp;quot; : [{         &amp;quot;account_item_id&amp;quot; : 1500,         &amp;quot;account_item_name&amp;quot; : &amp;quot;売上高&amp;quot;,         &amp;quot;hierarchy_level&amp;quot; : 2,         &amp;quot;account_category_name&amp;quot; : &amp;quot;営業収益&amp;quot;,         &amp;quot;opening_balance&amp;quot; : 100000,         &amp;quot;debit_amount&amp;quot; : 50000,         &amp;quot;credit_amount&amp;quot; : 20000,         &amp;quot;closing_balance&amp;quot; : 130000,         &amp;quot;composition_ratio&amp;quot; : 0.25         &amp;quot;partners&amp;quot; : [{           &amp;quot;id&amp;quot; : 123,           &amp;quot;name&amp;quot; : &amp;quot;freee&amp;quot;,           &amp;quot;opening_balance&amp;quot; : 100000,           &amp;quot;debit_amount&amp;quot; : 50000,           &amp;quot;credit_amount&amp;quot; : 20000,           &amp;quot;closing_balance&amp;quot; : 130000,           &amp;quot;composition_ratio&amp;quot; : 0.25           },         ...         ]       },       ...       ]     } }&lt;/code&gt;&lt;/pre&gt; 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param companyId 事業所ID
 * @param optional nil or *GetTrialPlOpts - Optional Parameters:
 * @param "FiscalYear" (optional.Int32) -  会計年度
 * @param "StartMonth" (optional.Int32) -  発生月で絞込：開始会計月(1-12)
 * @param "EndMonth" (optional.Int32) -  発生月で絞込：終了会計月(1-12)
 * @param "StartDate" (optional.String) -  発生日で絞込：開始日(yyyy-mm-dd)
 * @param "EndDate" (optional.String) -  発生日で絞込：終了日(yyyy-mm-dd)
 * @param "AccountItemDisplayType" (optional.String) -  勘定科目の表示（勘定科目: account_item, 決算書表示:group）
 * @param "BreakdownDisplayType" (optional.String) -  内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます
 * @param "PartnerId" (optional.Int32) -  取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
 * @param "PartnerCode" (optional.String) -  取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
 * @param "ItemId" (optional.Int32) -  品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
 * @param "SectionId" (optional.Int32) -  部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
 * @param "Adjustment" (optional.String) -  決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）
 * @param "CostAllocation" (optional.String) -  配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）
@return TrialPlResponse
*/
func (a *TrialBalanceApiService) GetTrialPl(ctx _context.Context, companyId int32, localVarOptionals *GetTrialPlOpts) (TrialPlResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialPlResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1/reports/trial_pl"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(companyId, ""))
	if localVarOptionals != nil && localVarOptionals.FiscalYear.IsSet() {
		localVarQueryParams.Add("fiscal_year", parameterToString(localVarOptionals.FiscalYear.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartMonth.IsSet() {
		localVarQueryParams.Add("start_month", parameterToString(localVarOptionals.StartMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndMonth.IsSet() {
		localVarQueryParams.Add("end_month", parameterToString(localVarOptionals.EndMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountItemDisplayType.IsSet() {
		localVarQueryParams.Add("account_item_display_type", parameterToString(localVarOptionals.AccountItemDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BreakdownDisplayType.IsSet() {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(localVarOptionals.BreakdownDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerId.IsSet() {
		localVarQueryParams.Add("partner_id", parameterToString(localVarOptionals.PartnerId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerCode.IsSet() {
		localVarQueryParams.Add("partner_code", parameterToString(localVarOptionals.PartnerCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemId.IsSet() {
		localVarQueryParams.Add("item_id", parameterToString(localVarOptionals.ItemId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SectionId.IsSet() {
		localVarQueryParams.Add("section_id", parameterToString(localVarOptionals.SectionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Adjustment.IsSet() {
		localVarQueryParams.Add("adjustment", parameterToString(localVarOptionals.Adjustment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CostAllocation.IsSet() {
		localVarQueryParams.Add("cost_allocation", parameterToString(localVarOptionals.CostAllocation.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetTrialPlSectionsOpts Optional parameters for the method 'GetTrialPlSections'
type GetTrialPlSectionsOpts struct {
    FiscalYear optional.Int32
    StartMonth optional.Int32
    EndMonth optional.Int32
    StartDate optional.String
    EndDate optional.String
    AccountItemDisplayType optional.String
    BreakdownDisplayType optional.String
    PartnerId optional.Int32
    PartnerCode optional.String
    ItemId optional.Int32
    Adjustment optional.String
    CostAllocation optional.String
}

/*
GetTrialPlSections 損益計算書(部門比較)の取得
 &lt;h2 id&#x3D;\&quot;\&quot;&gt;概要&lt;/h2&gt;  &lt;p&gt;指定した事業所の損益計算書(部門比較)を取得する&lt;/p&gt;  &lt;h2 id&#x3D;\&quot;_2\&quot;&gt;定義&lt;/h2&gt;  &lt;ul&gt;  &lt;li&gt; &lt;p&gt;created_at : 作成日時&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;account_item_name : 勘定科目名&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;hierarchy_level: 階層レベル&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;parent_account_category_name: 上位勘定科目カテゴリー名&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;closing_balance : 期末残高 &lt;/p&gt; &lt;/li&gt; &lt;h2 id&#x3D;\&quot;_3\&quot;&gt;注意点&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;個人向けのプレミアムプラン、法人向けのビジネスプラン以上で利用可能なAPIです。対象外のプランでは401エラーを返却します。&lt;/li&gt; &lt;li&gt;会計年度が指定されない場合、現在の会計年度がデフォルトとなります。&lt;/li&gt; &lt;li&gt;絞り込み条件の日付と、月または年度は同時に指定することはできません。&lt;/li&gt; &lt;li&gt;up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。&lt;/li&gt; &lt;li&gt;配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。&lt;/li&gt; &lt;/ul&gt; &lt;h2 id&#x3D;\&quot;_4\&quot;&gt;レスポンスの例&lt;/h2&gt;  &lt;blockquote&gt; &lt;p&gt;GET https://api.freee.co.jp/api/1/reports/trial_pl_section?company_id&#x3D;1&amp;amp;section_ids&#x3D;1,2,3&amp;amp;fiscal_year&#x3D;2017&lt;/p&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;pre&gt;&lt;code&gt;{   &amp;quot;trial_pl_sections&amp;quot; :     {       &amp;quot;company_id&amp;quot; : 1,       &amp;quot;section_ids&amp;quot; : &amp;quot;1,2,3&amp;quot;,       &amp;quot;fiscal_year&amp;quot; : 2017,       &amp;quot;created_at&amp;quot; : &amp;quot;2018-05-01 12:00:50&amp;quot       &amp;quot;balances&amp;quot; : [{         &amp;quot;account_item_id&amp;quot; : 1500,         &amp;quot;account_item_name&amp;quot; : &amp;quot;売上高&amp;quot;,         &amp;quot;hierarchy_level&amp;quot; : 2,         &amp;quot;account_category_name&amp;quot; : &amp;quot;営業収益&amp;quot;,         &amp;quot;closing_balance&amp;quot; : 1000000,         &amp;quot;sections&amp;quot; : [{           &amp;quot;id&amp;quot;: 1           &amp;quot;name&amp;quot;: &amp;quot;営業部&amp;quot;,           &amp;quot;closing_balance&amp;quot; : 100000         },         {           &amp;quot;id&amp;quot;: 2           &amp;quot;name&amp;quot;: &amp;quot;広報部&amp;quot;,           &amp;quot;closing_balance&amp;quot; : 200000         },         {           &amp;quot;id&amp;quot;: 3           &amp;quot;name&amp;quot;: &amp;quot;人事部&amp;quot;,           &amp;quot;closing_balance&amp;quot; : 300000         },         ...         ]       },       ...       ]     } }&lt;/code&gt;&lt;/pre&gt; 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param companyId 事業所ID
 * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
 * @param optional nil or *GetTrialPlSectionsOpts - Optional Parameters:
 * @param "FiscalYear" (optional.Int32) -  会計年度
 * @param "StartMonth" (optional.Int32) -  発生月で絞込：開始会計月(1-12)
 * @param "EndMonth" (optional.Int32) -  発生月で絞込：終了会計月(1-12)
 * @param "StartDate" (optional.String) -  発生日で絞込：開始日(yyyy-mm-dd)
 * @param "EndDate" (optional.String) -  発生日で絞込：終了日(yyyy-mm-dd)
 * @param "AccountItemDisplayType" (optional.String) -  勘定科目の表示（勘定科目: account_item, 決算書表示:group）
 * @param "BreakdownDisplayType" (optional.String) -  内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます
 * @param "PartnerId" (optional.Int32) -  取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
 * @param "PartnerCode" (optional.String) -  取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
 * @param "ItemId" (optional.Int32) -  品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
 * @param "Adjustment" (optional.String) -  決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）
 * @param "CostAllocation" (optional.String) -  配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）
@return TrialPlSectionsResponse
*/
func (a *TrialBalanceApiService) GetTrialPlSections(ctx _context.Context, companyId int32, sectionIds string, localVarOptionals *GetTrialPlSectionsOpts) (TrialPlSectionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialPlSectionsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1/reports/trial_pl_sections"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(companyId, ""))
	localVarQueryParams.Add("section_ids", parameterToString(sectionIds, ""))
	if localVarOptionals != nil && localVarOptionals.FiscalYear.IsSet() {
		localVarQueryParams.Add("fiscal_year", parameterToString(localVarOptionals.FiscalYear.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartMonth.IsSet() {
		localVarQueryParams.Add("start_month", parameterToString(localVarOptionals.StartMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndMonth.IsSet() {
		localVarQueryParams.Add("end_month", parameterToString(localVarOptionals.EndMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountItemDisplayType.IsSet() {
		localVarQueryParams.Add("account_item_display_type", parameterToString(localVarOptionals.AccountItemDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BreakdownDisplayType.IsSet() {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(localVarOptionals.BreakdownDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerId.IsSet() {
		localVarQueryParams.Add("partner_id", parameterToString(localVarOptionals.PartnerId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerCode.IsSet() {
		localVarQueryParams.Add("partner_code", parameterToString(localVarOptionals.PartnerCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemId.IsSet() {
		localVarQueryParams.Add("item_id", parameterToString(localVarOptionals.ItemId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Adjustment.IsSet() {
		localVarQueryParams.Add("adjustment", parameterToString(localVarOptionals.Adjustment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CostAllocation.IsSet() {
		localVarQueryParams.Add("cost_allocation", parameterToString(localVarOptionals.CostAllocation.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetTrialPlThreeYearsOpts Optional parameters for the method 'GetTrialPlThreeYears'
type GetTrialPlThreeYearsOpts struct {
    FiscalYear optional.Int32
    StartMonth optional.Int32
    EndMonth optional.Int32
    StartDate optional.String
    EndDate optional.String
    AccountItemDisplayType optional.String
    BreakdownDisplayType optional.String
    PartnerId optional.Int32
    PartnerCode optional.String
    ItemId optional.Int32
    SectionId optional.Int32
    Adjustment optional.String
    CostAllocation optional.String
}

/*
GetTrialPlThreeYears 損益計算書(３期間比較)の取得
 &lt;h2 id&#x3D;\&quot;\&quot;&gt;概要&lt;/h2&gt;  &lt;p&gt;指定した事業所の損益計算書(３期間比較)を取得する&lt;/p&gt;  &lt;h2 id&#x3D;\&quot;_2\&quot;&gt;定義&lt;/h2&gt;  &lt;ul&gt;  &lt;li&gt; &lt;p&gt;created_at : 作成日時&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;account_item_name : 勘定科目名&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;hierarchy_level: 階層レベル&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;parent_account_category_name: 上位勘定科目カテゴリー名&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;two_years_before_closing_balance:  前々年度期末残高 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;last_year_closing_balance:  前年度期末残高 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;closing_balance : 期末残高 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;year_on_year : 前年比&lt;/p&gt; &lt;/li&gt; &lt;h2 id&#x3D;\&quot;_3\&quot;&gt;注意点&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;会計年度が指定されない場合、現在の会計年度がデフォルトとなります。&lt;/li&gt; &lt;li&gt;絞り込み条件の日付と、月または年度は同時に指定することはできません。&lt;/li&gt; &lt;li&gt;up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。&lt;/li&gt; &lt;li&gt;配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。&lt;/li&gt; &lt;/ul&gt; &lt;h2 id&#x3D;\&quot;_4\&quot;&gt;レスポンスの例&lt;/h2&gt;  &lt;blockquote&gt; &lt;p&gt;GET https://api.freee.co.jp/api/1/reports/trial_pl_three_years?company_id&#x3D;1&amp;fiscal_year&#x3D;2017&lt;/p&gt; &lt;/blockquote&gt;  &lt;pre&gt;&lt;code&gt;{   &amp;quot;trial_pl_three_years&amp;quot; :     {       &amp;quot;company_id&amp;quot; : 1,       &amp;quot;fiscal_year&amp;quot; : 2017,       &amp;quot;created_at&amp;quot; : &amp;quot;2018-05-01 12:00:50&amp;quot       &amp;quot;balances&amp;quot; : [{         &amp;quot;account_item_id&amp;quot; : 1500,         &amp;quot;account_item_name&amp;quot; : &amp;quot;売上高&amp;quot;,         &amp;quot;hierarchy_level&amp;quot; : 2,         &amp;quot;account_category_name&amp;quot; : &amp;quot;営業収益&amp;quot;,         &amp;quot;two_year_before_closing_balance&amp;quot; : 50000,         &amp;quot;last_year_closing_balance&amp;quot; : 25000,         &amp;quot;closing_balance&amp;quot; : 100000,         &amp;quot;year_on_year&amp;quot; : 0.85       },       ...       ]     } }&lt;/code&gt;&lt;/pre&gt; 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param companyId 事業所ID
 * @param optional nil or *GetTrialPlThreeYearsOpts - Optional Parameters:
 * @param "FiscalYear" (optional.Int32) -  会計年度
 * @param "StartMonth" (optional.Int32) -  発生月で絞込：開始会計月(1-12)
 * @param "EndMonth" (optional.Int32) -  発生月で絞込：終了会計月(1-12)
 * @param "StartDate" (optional.String) -  発生日で絞込：開始日(yyyy-mm-dd)
 * @param "EndDate" (optional.String) -  発生日で絞込：終了日(yyyy-mm-dd)
 * @param "AccountItemDisplayType" (optional.String) -  勘定科目の表示（勘定科目: account_item, 決算書表示:group）
 * @param "BreakdownDisplayType" (optional.String) -  内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます
 * @param "PartnerId" (optional.Int32) -  取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
 * @param "PartnerCode" (optional.String) -  取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
 * @param "ItemId" (optional.Int32) -  品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
 * @param "SectionId" (optional.Int32) -  部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
 * @param "Adjustment" (optional.String) -  決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）
 * @param "CostAllocation" (optional.String) -  配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）
@return TrialPlThreeYearsResponse
*/
func (a *TrialBalanceApiService) GetTrialPlThreeYears(ctx _context.Context, companyId int32, localVarOptionals *GetTrialPlThreeYearsOpts) (TrialPlThreeYearsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialPlThreeYearsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1/reports/trial_pl_three_years"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(companyId, ""))
	if localVarOptionals != nil && localVarOptionals.FiscalYear.IsSet() {
		localVarQueryParams.Add("fiscal_year", parameterToString(localVarOptionals.FiscalYear.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartMonth.IsSet() {
		localVarQueryParams.Add("start_month", parameterToString(localVarOptionals.StartMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndMonth.IsSet() {
		localVarQueryParams.Add("end_month", parameterToString(localVarOptionals.EndMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountItemDisplayType.IsSet() {
		localVarQueryParams.Add("account_item_display_type", parameterToString(localVarOptionals.AccountItemDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BreakdownDisplayType.IsSet() {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(localVarOptionals.BreakdownDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerId.IsSet() {
		localVarQueryParams.Add("partner_id", parameterToString(localVarOptionals.PartnerId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerCode.IsSet() {
		localVarQueryParams.Add("partner_code", parameterToString(localVarOptionals.PartnerCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemId.IsSet() {
		localVarQueryParams.Add("item_id", parameterToString(localVarOptionals.ItemId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SectionId.IsSet() {
		localVarQueryParams.Add("section_id", parameterToString(localVarOptionals.SectionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Adjustment.IsSet() {
		localVarQueryParams.Add("adjustment", parameterToString(localVarOptionals.Adjustment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CostAllocation.IsSet() {
		localVarQueryParams.Add("cost_allocation", parameterToString(localVarOptionals.CostAllocation.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetTrialPlTwoYearsOpts Optional parameters for the method 'GetTrialPlTwoYears'
type GetTrialPlTwoYearsOpts struct {
    FiscalYear optional.Int32
    StartMonth optional.Int32
    EndMonth optional.Int32
    StartDate optional.String
    EndDate optional.String
    AccountItemDisplayType optional.String
    BreakdownDisplayType optional.String
    PartnerId optional.Int32
    PartnerCode optional.String
    ItemId optional.Int32
    SectionId optional.Int32
    Adjustment optional.String
    CostAllocation optional.String
}

/*
GetTrialPlTwoYears 損益計算書(前年比較)の取得
 &lt;h2 id&#x3D;\&quot;\&quot;&gt;概要&lt;/h2&gt;  &lt;p&gt;指定した事業所の損益計算書(前年比較)を取得する&lt;/p&gt;  &lt;h2 id&#x3D;\&quot;_2\&quot;&gt;定義&lt;/h2&gt;  &lt;ul&gt;  &lt;li&gt; &lt;p&gt;created_at : 作成日時&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;account_item_name : 勘定科目名&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;hierarchy_level: 階層レベル&lt;/p&gt; &lt;/li&gt;  &lt;li&gt; &lt;p&gt;parent_account_category_name: 上位勘定科目カテゴリー名&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;last_year_closing_balance:  前年度期末残高 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;closing_balance : 期末残高 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;year_on_year : 前年比&lt;/p&gt; &lt;/li&gt; &lt;h2 id&#x3D;\&quot;_3\&quot;&gt;注意点&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;会計年度が指定されない場合、現在の会計年度がデフォルトとなります。&lt;/li&gt; &lt;li&gt;絞り込み条件の日付と、月または年度は同時に指定することはできません。&lt;/li&gt; &lt;li&gt;up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。&lt;/li&gt; &lt;li&gt;配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。&lt;/li&gt; &lt;/ul&gt;  &lt;h2 id&#x3D;\&quot;_4\&quot;&gt;レスポンスの例&lt;/h2&gt;  &lt;blockquote&gt; &lt;p&gt;GET https://api.freee.co.jp/api/1/reports/trial_pl_two_years?company_id&#x3D;1&amp;amp;fiscal_year&#x3D;2017&lt;/p&gt; &lt;/blockquote&gt;  &lt;pre&gt;&lt;code&gt;{   &amp;quot;trial_pl_two_years&amp;quot; :     {       &amp;quot;company_id&amp;quot; : 1,       &amp;quot;fiscal_year&amp;quot; : 2017,       &amp;quot;created_at&amp;quot; : &amp;quot;2018-05-01 12:00:50&amp;quot       &amp;quot;balances&amp;quot; : [{         &amp;quot;account_item_id&amp;quot; : 1500,         &amp;quot;account_item_name&amp;quot; : &amp;quot;売上高&amp;quot;,         &amp;quot;hierarchy_level&amp;quot; : 2,         &amp;quot;account_category_name&amp;quot; : &amp;quot;営業収益&amp;quot;,         &amp;quot;last_year_closing_balance&amp;quot; : 25000,         &amp;quot;closing_balance&amp;quot; : 100000,         &amp;quot;year_on_year&amp;quot; : 0.85        },       ...       ]     } }&lt;/code&gt;&lt;/pre&gt; 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param companyId 事業所ID
 * @param optional nil or *GetTrialPlTwoYearsOpts - Optional Parameters:
 * @param "FiscalYear" (optional.Int32) -  会計年度
 * @param "StartMonth" (optional.Int32) -  発生月で絞込：開始会計月(1-12)
 * @param "EndMonth" (optional.Int32) -  発生月で絞込：終了会計月(1-12)
 * @param "StartDate" (optional.String) -  発生日で絞込：開始日(yyyy-mm-dd)
 * @param "EndDate" (optional.String) -  発生日で絞込：終了日(yyyy-mm-dd)
 * @param "AccountItemDisplayType" (optional.String) -  勘定科目の表示（勘定科目: account_item, 決算書表示:group）
 * @param "BreakdownDisplayType" (optional.String) -  内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます
 * @param "PartnerId" (optional.Int32) -  取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
 * @param "PartnerCode" (optional.String) -  取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
 * @param "ItemId" (optional.Int32) -  品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
 * @param "SectionId" (optional.Int32) -  部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
 * @param "Adjustment" (optional.String) -  決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）
 * @param "CostAllocation" (optional.String) -  配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）
@return TrialPlTwoYearsResponse
*/
func (a *TrialBalanceApiService) GetTrialPlTwoYears(ctx _context.Context, companyId int32, localVarOptionals *GetTrialPlTwoYearsOpts) (TrialPlTwoYearsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialPlTwoYearsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/1/reports/trial_pl_two_years"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(companyId, ""))
	if localVarOptionals != nil && localVarOptionals.FiscalYear.IsSet() {
		localVarQueryParams.Add("fiscal_year", parameterToString(localVarOptionals.FiscalYear.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartMonth.IsSet() {
		localVarQueryParams.Add("start_month", parameterToString(localVarOptionals.StartMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndMonth.IsSet() {
		localVarQueryParams.Add("end_month", parameterToString(localVarOptionals.EndMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountItemDisplayType.IsSet() {
		localVarQueryParams.Add("account_item_display_type", parameterToString(localVarOptionals.AccountItemDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BreakdownDisplayType.IsSet() {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(localVarOptionals.BreakdownDisplayType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerId.IsSet() {
		localVarQueryParams.Add("partner_id", parameterToString(localVarOptionals.PartnerId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerCode.IsSet() {
		localVarQueryParams.Add("partner_code", parameterToString(localVarOptionals.PartnerCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemId.IsSet() {
		localVarQueryParams.Add("item_id", parameterToString(localVarOptionals.ItemId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SectionId.IsSet() {
		localVarQueryParams.Add("section_id", parameterToString(localVarOptionals.SectionId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Adjustment.IsSet() {
		localVarQueryParams.Add("adjustment", parameterToString(localVarOptionals.Adjustment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CostAllocation.IsSet() {
		localVarQueryParams.Add("cost_allocation", parameterToString(localVarOptionals.CostAllocation.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
